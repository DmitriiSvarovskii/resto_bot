from typing import Optional

from src.callbacks import CreateOrderCallbackFactory
from src.callbacks.order import OrderCallbackFactory
from src.utils import OrderTypes, OrderStatus


def create_btn_cart(mess_id: int, language: str) -> dict[str, dict[str, str]]:
    btn = {
        'add_comment': {
            'text': '–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
            'callback_data': 'press_comment'
        },
        'takeaway': {
            'text': '–°–∞–º–æ–≤—ã–≤–æ–∑',
            'callback_data': OrderCallbackFactory(
                type_callback='create',
                order_type=OrderTypes.TAKEAWAY.value['id'],
                status=OrderStatus.NEW.value['id'],
                mess_id=mess_id,
                language=language
            ).pack()
        },
        'dine_in': {
            'text': '–í –∑–∞–ª–µ',
            'callback_data': OrderCallbackFactory(
                type_callback='create',
                order_type=OrderTypes.DINEIN.value['id'],
                status=OrderStatus.NEW.value['id'],
                mess_id=mess_id,
                language=language
            ).pack()
        },
        'delivery': {
            'text': '–î–æ—Å—Ç–∞–≤–∫–∞ üöö',
            'callback_data': 'press_delivery_pay'
        },
        'main_menu': {
            'text': '–ú–µ–Ω—é',
            'callback_data': 'press_menu'
        },
        'clear': {
            'text': '–û—á–∏—Å—Ç–∏—Ç—å',
            'callback_data': 'press_empty'
        },
        'edit': {
            'text': '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å',
            'callback_data': 'press_edit_cart'
        },
    }
    return btn


def create_total_btn(bill: int) -> dict[str, dict[str, str]]:
    return {
        'total': {
            'text': f'–ò—Ç–æ–≥–æ: {bill} ‚Çπ',
            'callback_data': 'press_pass'
        }
    }


edit_cart_dict: dict[str, str] = {
    'edit_cart': '–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏: '
                 '"‚ûï", "‚ûñ" –∏–ª–∏ "‚úñÔ∏è".\n\n'
                 '"‚ûï" - –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë 1 –µ–¥–∏–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É\n\n'
                 '"‚ûñ" - —É–±—Ä–∞—Ç—å 1 –µ–¥–∏–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã\n\n'
                 '"‚úñÔ∏è" - –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä\n\n'
                 '–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É, '
                 '–Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É "–û—á–∏—Å—Ç–∏—Ç—å"\n\n',
    'empty_cart': '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞',
    'cart_error': '–¢–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!',
}


edit_btn_cart_dict: dict[str, dict[str, str]] = {
    'main_menu': {
        'text': '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        'callback_data': 'press_main_menu'
    },
    'clear': {
        'text': '–û—á–∏—Å—Ç–∏—Ç—å',
        'callback_data': 'press_empty'
    },
    'checkout': {
        'text': '–û—Ñ–æ—Ä–º–∏—Ç—å',
        'callback_data': 'press_cart'
    }
}


def create_cart_text(
        bill: int,
        order_text: str,
        order_comment: Optional[str] = None,
        box_price: Optional[int] = None
):
    if not order_comment:
        message = (
            '–í–∞—à –∑–∞–∫–∞–∑:\n\n'
            f'{order_text}'
            "--------------------\n"
            f'–ò—Ç–æ–≥–æ –±–µ–∑ —Å–∫–∏–¥–∫–∏: {bill} ‚Çπ\n'
            f'–°–∫–∏–¥–∫–∞: {bill*0.05} ‚Çπ\n'
            f'–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π: {bill*0.95} ‚Çπ\n'
        )
    else:
        message = (
            '–í–∞—à –∑–∞–∫–∞–∑:\n\n'
            f'{order_text}'
            "--------------------\n"
            f'–ò—Ç–æ–≥–æ –±–µ–∑ —Å–∫–∏–¥–∫–∏: {bill} ‚Çπ\n'
            f'–ò—Ç–æ–≥–æ —Ü–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π: {bill * 0.95} ‚Çπ\n'
            f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É: {order_comment}\n'
        )
    if box_price and box_price > 0:
        message += (
            f'–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–ª–∞—Ç–∞ –∑–∞ —É–ø–∞–∫–æ–≤–∫—É: {box_price} ‚Çπ\n'
            "--------------------\n"
            f'–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:: {bill * 0.95 + box_price} ‚Çπ\n'
        )
    return message

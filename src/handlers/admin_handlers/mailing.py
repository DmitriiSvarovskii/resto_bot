import asyncio
import random
import os
from aiogram import Bot, types
from aiogram.filters import Command
from aiogram.types import FSInputFile
from aiogram.exceptions import TelegramBadRequest
import asyncio
import os
import random
import logging

from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.fsm.state import default_state
from aiogram import Bot, types, Router
from aiogram.filters import Command
from aiogram.exceptions import TelegramForbiddenError, TelegramBadRequest

from src.db import customer_db, store_db
from src.keyboards import admin_kb, main_kb


router = Router(name=__name__)

logger = logging.getLogger(__name__)


@router.message((Command('m')))
async def create_mail_group(message: types.Message, bot: Bot):
    user_info = await customer_db.get_user_info_by_id(
        user_id=message.chat.id
    )
    store_info = await store_db.get_store_info()
    if user_info.admin:
        await bot.send_photo(
            chat_id=store_info.sale_group,
            photo=message.photo[-1].file_id,
            caption=message.caption[2:],
            reply_markup=admin_kb.create_kb_sale_group()
        )

        await message.answer(
            text='–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ',
            reply_markup=await main_kb.create_kb_main(
                language=message.from_user.language_code,
                user_id=message.chat.id
            )
        )
    else:
        await message.answer(
            text='–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ—Ç–∞',
            reply_markup=await main_kb.create_kb_main(
                language=message.from_user.language_code,
                user_id=message.chat.id
            )
        )


@router.message((Command('mail')))
async def create_mail_chats(message: types.Message,
                            bot: Bot,
                            state: FSMContext):
    user_info = await customer_db.get_user_info_by_id(
        user_id=message.chat.id
    )

    # store_info = await store_db.get_store_info()
    customer_list = await customer_db.db_get_users_list()
    if user_info.admin:
        for user_data in customer_list:
            try:
                await bot.send_message(
                    chat_id=user_data.user_id,
                    text="–î—Ä—É–∑—å—è, —É –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤—ã—à–ª–æ –¥–æ–ª–≥–æ–∂–¥–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:\n"
                    "üåê –ù–∞—à–µ –º–µ–Ω—é –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–∞—Ö (—è–∑—ã–∫ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–∞—à–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞)!\n"
                    "üî• –î–æ–±–∞–≤–∏–ª–∏ —Ä–∞–∑–¥–µ–ª '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ' - —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –ª—É—á—à–∏–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏!\n"
                    "üçΩ –í –º–µ–Ω—é –±–æ—Ç–∞ –≤—Å–µ–≥–¥–∞ —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –±–ª—é–¥–∞!\n"
                    "üõí –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ —Ä–∞–∑–¥–µ–ª '–ú–∞–≥–∞–∑–∏–Ω', –≥–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã, –æ—Ç –∑–∞–º–æ—Ä–æ–∑–æ–∫ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –¥–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –∫—É—Ä–∏–ª–æ–∫.\n\n"
                    "–ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –Ω–æ–≤–∏–Ω–∫–∏! –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –∏ –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞! ü•Ç",
                    reply_markup=await main_kb.create_kb_main(
                        language='ru', user_id=user_data.user_id
                    )
                )

            except TelegramForbiddenError:
                continue
            except Exception:
                continue
        await message.answer(
            text='–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.'
        )
    else:
        await message.answer(
            text='–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ—Ç–∞',
            reply_markup=await main_kb.create_kb_main(
                language=message.from_user.language_code,
                user_id=message.chat.id
            )
        )


@router.message(Command('13'))
async def create_mail_group_auto(bot: Bot):
    max_retries = 7
    logger.info("Handler 'create_mail_group_auto' started")

    for attempt in range(max_retries):
        logger.info(f"Attempt {attempt + 1} of {max_retries}")
        try:
            logger.debug("Fetching store information")
            store_info = await store_db.get_store_info(store_id=1)
            logger.info(f"Store info retrieved: {store_info}")

            text = (
                '–í—Å–µ–º —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è üî•\n'
                '–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Marcello üëá\n'
                '–ü—Ä–∏ –∑–∞–∫–∞–∑–µ —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Å–∫–∏–¥–∫–∞ –Ω–∞ –≤—Å–µ –º–µ–Ω—é 5% üëç\n'
                '–ù–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è + –ª—É—á—à–∏–π –∫–æ—Ñ–µ ‚òïÔ∏è –∏ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä ü´∂'
            )

            current_dir = os.path.dirname(os.path.abspath(__file__))
            static_folder = os.path.abspath(
                os.path.join(current_dir, '../../static'))
            logger.debug(f"Static folder path: {static_folder}")

            if not os.path.isdir(static_folder):
                logger.error(
                    f"–ü–∞–ø–∫–∞ static –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏: {static_folder}")
                return

            file_list = os.listdir(static_folder)
            logger.debug(f"Files in static folder: {file_list}")

            if not file_list:
                logger.warning("–í –ø–∞–ø–∫–µ static –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
                return

            random_file = random.choice(file_list)
            logger.info(f"Selected file: {random_file}")

            random_file_path = os.path.join(static_folder, random_file)
            if not os.path.isfile(random_file_path):
                logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {random_file_path}")
                return

            photo_file = FSInputFile(random_file_path)
            logger.debug(f"Photo file prepared: {photo_file}")

            await bot.send_photo(
                chat_id=store_info.sale_group,
                photo=photo_file,
                caption=text,
                reply_markup=admin_kb.create_kb_sale_group()
            )
            logger.info("Photo sent successfully.")
            break  # –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
        except TelegramBadRequest as e:
            logger.error(f"TelegramBadRequest: {e}")
            if attempt < max_retries - 1:
                logger.info("Retrying after TelegramBadRequest...")
                await asyncio.sleep(1)
            else:
                logger.critical(
                    "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        except Exception as e:
            logger.exception(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            break
